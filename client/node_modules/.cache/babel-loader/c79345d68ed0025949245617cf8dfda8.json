{"ast":null,"code":"import jsTPS_Transaction from \"../common/jsTPS.js\";\nimport api from '../api';\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\n\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n  /*\n  constructor(initID, initListLength, initSong, initIndex) {\n      super();\n      this.listID = initID;\n      this.songInfo = initSong;\n      this.index = initIndex;\n      this.listLength = initListLength;\n  }\n  */\n  constructor(initList, initSong) {\n    super();\n    this.list = initList;\n    this.listID = initList._id;\n    this.songInfo = initSong;\n  }\n  /*\n  // DELETE SONG AT GIVEN INDEX FROM LIST\n  doTransaction() {\n      async function asyncCreateNewSong(id, songInfo){\n          if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n          let resposne = await api.postSong(id, songInfo)\n      }\n      asyncCreateNewSong(this.listID, this.songInfo);\n  }\n  */\n  // DELETE SONG AT GIVEN INDEX FROM LIST\n\n\n  doTransaction() {\n    async function asyncCreateNewSong(list, songInfo) {\n      if (!songInfo) {\n        songInfo = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"yvjvLqfawpk\"\n        };\n      }\n\n      list.songs.push(songInfo);\n      let response = await api.postSong(list._id, list.songs); //\n    }\n\n    asyncCreateNewSong(this.list, this.songInfo);\n  } // RESTORE DELETED SONG AT LAST KNOWN INDEX\n\n\n  undoTransaction() {\n    console.log(\"UNDOING ADD TRANSACTION\"); //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n\n    async function asyncUndoCreate(id, index) {\n      console.log(\"Index = \" + index);\n      let response = await api.deleteSongUndo(id, index);\n    }\n\n    asyncUndoCreate(this.listID, this.listLength - 1);\n  }\n\n}","map":{"version":3,"names":["jsTPS_Transaction","api","AddSong_Transaction","constructor","initList","initSong","list","listID","_id","songInfo","doTransaction","asyncCreateNewSong","songs","push","response","postSong","undoTransaction","console","log","asyncUndoCreate","id","index","deleteSongUndo","listLength"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/transactions/AddSong_Transaction.js"],"sourcesContent":["import jsTPS_Transaction from \"../common/jsTPS.js\"\nimport api from '../api'\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n    \n    /*\n    constructor(initID, initListLength, initSong, initIndex) {\n        super();\n        this.listID = initID;\n        this.songInfo = initSong;\n        this.index = initIndex;\n        this.listLength = initListLength;\n    }\n    */\n\n    constructor(initList, initSong) {\n        super();\n        this.list = initList;\n        this.listID = initList._id;\n        this.songInfo = initSong;\n    }\n\n    /*\n    // DELETE SONG AT GIVEN INDEX FROM LIST\n    doTransaction() {\n        async function asyncCreateNewSong(id, songInfo){\n            if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n            let resposne = await api.postSong(id, songInfo)\n        }\n        asyncCreateNewSong(this.listID, this.songInfo);\n    }\n    */\n\n    // DELETE SONG AT GIVEN INDEX FROM LIST\n    doTransaction() {\n        async function asyncCreateNewSong(list, songInfo){\n            if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n            list.songs.push(songInfo)\n            let response = await api.postSong(list._id, list.songs)\n            //\n        }\n        asyncCreateNewSong(this.list, this.songInfo);\n    }\n    \n    // RESTORE DELETED SONG AT LAST KNOWN INDEX\n    undoTransaction() {\n        console.log(\"UNDOING ADD TRANSACTION\")\n        //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n        async function asyncUndoCreate(id, index){\n            console.log(\"Index = \" + index)\n            let response = await api.deleteSongUndo(id, index)\n        }\n        asyncUndoCreate(this.listID, this.listLength-1);\n    }\n}"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCF,iBAAlC,CAAoD;EAE/D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEIG,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqB;IAC5B;IACA,KAAKC,IAAL,GAAYF,QAAZ;IACA,KAAKG,MAAL,GAAcH,QAAQ,CAACI,GAAvB;IACA,KAAKC,QAAL,GAAgBJ,QAAhB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI;;;EACAK,aAAa,GAAG;IACZ,eAAeC,kBAAf,CAAkCL,IAAlC,EAAwCG,QAAxC,EAAiD;MAC7C,IAAG,CAACA,QAAJ,EAAa;QAACA,QAAQ,GAAG;UAAC,SAAS,UAAV;UAAsB,UAAU,SAAhC;UAA2C,aAAa;QAAxD,CAAX;MAAkF;;MAChGH,IAAI,CAACM,KAAL,CAAWC,IAAX,CAAgBJ,QAAhB;MACA,IAAIK,QAAQ,GAAG,MAAMb,GAAG,CAACc,QAAJ,CAAaT,IAAI,CAACE,GAAlB,EAAuBF,IAAI,CAACM,KAA5B,CAArB,CAH6C,CAI7C;IACH;;IACDD,kBAAkB,CAAC,KAAKL,IAAN,EAAY,KAAKG,QAAjB,CAAlB;EACH,CAvC8D,CAyC/D;;;EACAO,eAAe,GAAG;IACdC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADc,CAEd;;IACA,eAAeC,eAAf,CAA+BC,EAA/B,EAAmCC,KAAnC,EAAyC;MACrCJ,OAAO,CAACC,GAAR,CAAY,aAAaG,KAAzB;MACA,IAAIP,QAAQ,GAAG,MAAMb,GAAG,CAACqB,cAAJ,CAAmBF,EAAnB,EAAuBC,KAAvB,CAArB;IACH;;IACDF,eAAe,CAAC,KAAKZ,MAAN,EAAc,KAAKgB,UAAL,GAAgB,CAA9B,CAAf;EACH;;AAlD8D"},"metadata":{},"sourceType":"module"}