{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api'; // OUR TRANSACTIONS\n\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\n  SET_SONGS: \"SET_SONGS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_LIST: \"DELETE_LIST\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  UNMARK_SONG: \"UNMARK_SONG\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    songForDeletion: null,\n    modalActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          console.log(\"Trying to create new list\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          store.idNamePairs = store.idNamePairs.filter(i => i._id !== payload);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n\n      case GlobalStoreActionType.MARK_LIST_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: payload,\n            modalActive: false\n          });\n        }\n\n      case GlobalStoreActionType.EDIT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n\n      case GlobalStoreActionType.CREATE_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n\n      case GlobalStoreActionType.SET_SONGS:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            modalActive: true\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: payload,\n            modalActive: true\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: payload,\n            modalActive: true\n          });\n        }\n\n      case GlobalStoreActionType.UNMARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songForDeletion: null,\n            modalActive: false\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n    document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n  };\n\n  store.createNewList = function (newList) {\n    async function asyncCreateNewList(newList) {\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: { ...newList\n        }\n      });\n      let response = await api.postPlaylist({\n        \"name\": \"Untitled Playlist\",\n        \"songs\": []\n      });\n      console.log(\"ID = \" + response.data.playlist._id);\n      store.setCurrentList(response.data.playlist._id);\n    }\n\n    asyncCreateNewList(newList);\n  };\n\n  store.createAddSongTransaction = function () {\n    //let transaction = new AddSong_Transaction(store.currentList._id, store.currentList.songs.length, songInfo);\n    let transaction = new AddSong_Transaction(store.currentList, store);\n    tps.addTransaction(transaction);\n  };\n\n  store.createDeleteSongTransaction = function () {\n    let transaction = new DeleteSong_Transaction(store.currentList, store, store.songForDeletion);\n    tps.addTransaction(transaction);\n    store.hideDeleteSongModal();\n  };\n\n  store.createMoveSongTransaction = function (sourceId, targetId) {\n    let transaction = new MoveSong_Transaction(store.currentList, sourceId, targetId, store);\n    tps.addTransaction(transaction);\n  };\n\n  store.setSongs = function (newList) {\n    async function asyncSetSong(id, newList) {\n      let response = await api.postSong(id, newList.songs);\n\n      if (response.status === 200) {\n        console.log(response.data);\n      }\n    }\n\n    asyncSetSong(store.currentList._id, newList);\n    console.log(\"Setting current list to \" + JSON.stringify(newList));\n    console.log(\"Newlists.songs = \" + newList.songs);\n    storeReducer({\n      type: GlobalStoreActionType.SET_SONGS,\n      payload: { ...newList\n      }\n    });\n  };\n\n  store.showDeleteListModal = function (id) {\n    document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n    document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n\n    async function asyncMarkList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: playlist\n          });\n        }\n\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n      }\n    }\n\n    asyncMarkList(id);\n  };\n\n  store.hideDeleteListModal = function () {\n    store.refreshUndoRedo();\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST\n    });\n  };\n\n  store.deleteList = function () {\n    // MAY NEED TO USE STORE REDUCER HERE TO REFRESH THE PAGE\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylist(id);\n      console.log(`Success = ${response.data.success}`);\n      storeReducer({\n        type: GlobalStoreActionType.DELETE_LIST,\n        payload: id\n      });\n    }\n\n    asyncDeleteList(store.currentList._id);\n    store.hideDeleteListModal();\n  };\n\n  store.showDeleteSongModal = function (id) {\n    document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n    document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n    console.log(\"ID = \" + id);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: id\n    });\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteSongModal = function () {\n    store.refreshUndoRedo();\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_SONG\n    });\n  };\n\n  store.showEditSongModal = function (id) {\n    document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n    document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n      payload: id\n    });\n    document.getElementById(\"title\").value = store.currentList.songs[id].title;\n    document.getElementById(\"artist\").value = store.currentList.songs[id].artist;\n    document.getElementById(\"url\").value = store.currentList.songs[id].youTubeId;\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideEditSongModal = function () {\n    store.refreshUndoRedo();\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_SONG\n    });\n  };\n\n  store.createEditSongTransaction = function (newSong) {\n    let transaction = new EditSong_Transaction(store.currentList, store, store.songForDeletion, newSong);\n    tps.addTransaction(transaction);\n    store.hideEditSongModal();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE\n    });\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"hajYC6+IIL6wr4M7sYC/+wbstq8=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CREATE_NEW_SONG","SET_SONGS","MARK_LIST_FOR_DELETION","DELETE_LIST","MARK_SONG_FOR_DELETION","UNMARK_SONG","MARK_SONG_FOR_EDIT","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","songForDeletion","modalActive","storeReducer","action","type","payload","playlist","console","log","filter","i","_id","MARK_LIST_FOR_EDIT","EDIT_LIST","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransactions","document","getElementById","setAttribute","createNewList","newList","asyncCreateNewList","postPlaylist","setCurrentList","createAddSongTransaction","transaction","addTransaction","createDeleteSongTransaction","hideDeleteSongModal","createMoveSongTransaction","sourceId","targetId","setSongs","asyncSetSong","postSong","songs","status","JSON","stringify","showDeleteListModal","asyncMarkList","modal","classList","add","hideDeleteListModal","refreshUndoRedo","remove","deleteList","asyncDeleteList","deletePlaylist","showDeleteSongModal","showEditSongModal","value","title","artist","youTubeId","hideEditSongModal","createEditSongTransaction","newSong","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","setIsListNameEditActive","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\n\n// OUR TRANSACTIONS\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\n\n\n\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    CREATE_NEW_SONG : \"CREATE_NEW_SONG\",\n    SET_SONGS: \"SET_SONGS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    DELETE_LIST: \"DELETE_LIST\",\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n    UNMARK_SONG: \"UNMARK_SONG\",\n    MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        songForDeletion: null,\n        modalActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                console.log(\"Trying to create new list\")\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            case GlobalStoreActionType.DELETE_LIST: {\n                store.idNamePairs = store.idNamePairs.filter((i) => i._id !== payload)\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            case GlobalStoreActionType.MARK_LIST_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: payload,\n                    modalActive: false\n                })\n            }\n            case GlobalStoreActionType.EDIT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            case GlobalStoreActionType.CREATE_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            case GlobalStoreActionType.SET_SONGS: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    modalActive: true\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    songForDeletion: null,\n                    modalActive: false\n                });\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: payload,\n                    modalActive: true\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: payload,\n                    modalActive: true\n                })\n            }\n            case GlobalStoreActionType.UNMARK_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songForDeletion: null,\n                    modalActive: false\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        tps.clearAllTransactions();\n        document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n    }\n\n    store.createNewList = function (newList) {\n        async function asyncCreateNewList(newList){\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: {...newList}\n            })\n            let response = await api.postPlaylist({\"name\": \"Untitled Playlist\", \"songs\": []});\n            console.log(\"ID = \" + response.data.playlist._id)\n            store.setCurrentList(response.data.playlist._id)\n        }\n        asyncCreateNewList(newList);\n    }\n\n    store.createAddSongTransaction = function () {\n        //let transaction = new AddSong_Transaction(store.currentList._id, store.currentList.songs.length, songInfo);\n        let transaction = new AddSong_Transaction(store.currentList, store);\n        tps.addTransaction(transaction);    \n    }\n\n    store.createDeleteSongTransaction = function () {\n        let transaction = new DeleteSong_Transaction(store.currentList, store, store.songForDeletion)\n        tps.addTransaction(transaction);\n\n        store.hideDeleteSongModal();\n    }\n\n    store.createMoveSongTransaction = function (sourceId, targetId) {\n        let transaction = new MoveSong_Transaction(store.currentList, sourceId, targetId, store);\n        tps.addTransaction(transaction)\n    }\n\n    store.setSongs = function (newList) {\n        async function asyncSetSong(id, newList){\n            let response = await api.postSong(id, newList.songs)\n            if(response.status === 200){\n                console.log(response.data)\n            }\n        }\n        \n        asyncSetSong(store.currentList._id, newList);\n        console.log(\"Setting current list to \" + JSON.stringify(newList))\n        console.log(\"Newlists.songs = \" + newList.songs)\n        storeReducer({\n            type: GlobalStoreActionType.SET_SONGS,\n            payload: {...newList}\n        }) \n    }\n\n    store.showDeleteListModal = function (id) {\n        document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        async function asyncMarkList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                        payload: playlist\n                    });\n                }\n                let modal = document.getElementById(\"delete-list-modal\");\n                modal.classList.add(\"is-visible\");\n            }\n        }\n        asyncMarkList(id);\n    }\n\n    store.hideDeleteListModal= function () {\n        store.refreshUndoRedo();\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n        });\n    }\n\n\n    store.deleteList = function () {\n        // MAY NEED TO USE STORE REDUCER HERE TO REFRESH THE PAGE\n        async function asyncDeleteList(id){\n            let response = await api.deletePlaylist(id)\n            console.log(`Success = ${response.data.success}`)\n            storeReducer({\n                type: GlobalStoreActionType.DELETE_LIST,\n                payload: id\n            });\n        }\n        asyncDeleteList(store.currentList._id)\n        store.hideDeleteListModal()\n    }\n\n\n    store.showDeleteSongModal = function (id) {\n        document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        console.log(\"ID = \" + id)\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            payload: id\n        });\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteSongModal = function() {\n        store.refreshUndoRedo();\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_SONG,\n        });\n    }\n\n    \n    store.showEditSongModal = function(id) {\n        document.getElementById(\"undo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        document.getElementById(\"redo-button\").setAttribute(\"class\", \"playlister-button-disabled\")\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n            payload: id\n        });\n\n        document.getElementById(\"title\").value=store.currentList.songs[id].title;\n        document.getElementById(\"artist\").value=store.currentList.songs[id].artist;\n        document.getElementById(\"url\").value=store.currentList.songs[id].youTubeId;\n\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideEditSongModal = function() {\n        store.refreshUndoRedo();\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_SONG,\n        });\n    }\n\n    store.createEditSongTransaction = function(newSong) {\n        let transaction = new EditSong_Transaction(store.currentList, store, store.songForDeletion, newSong)\n        tps.addTransaction(transaction);\n\n        store.hideEditSongModal();\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.setIsListNameEditActive = function() {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE\n        });\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AAIA,OAAO,MAAMC,kBAAkB,gBAAGR,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AACA,OAAO,MAAMS,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBADe;EAEjCC,kBAAkB,EAAE,oBAFa;EAGjCC,eAAe,EAAE,iBAHgB;EAIjCC,kBAAkB,EAAE,oBAJa;EAKjCC,gBAAgB,EAAE,kBALe;EAMjCC,yBAAyB,EAAE,2BANM;EAOjCC,eAAe,EAAG,iBAPe;EAQjCC,SAAS,EAAE,WARsB;EASjCC,sBAAsB,EAAE,wBATS;EAUjCC,WAAW,EAAE,aAVoB;EAWjCC,sBAAsB,EAAE,wBAXS;EAYjCC,WAAW,EAAE,aAZoB;EAajCC,kBAAkB,EAAE;AAba,CAA9B,C,CAgBP;;AACA,MAAMC,GAAG,GAAG,IAAIrB,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMsB,cAAc,GAAG,MAAM;EAAA;;EAChC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC;IAC/B0B,WAAW,EAAE,EADkB;IAE/BC,WAAW,EAAE,IAFkB;IAG/BC,cAAc,EAAE,CAHe;IAI/BC,cAAc,EAAE,KAJe;IAK/BC,eAAe,EAAE,IALc;IAM/BC,WAAW,EAAE;EANkB,CAAD,CAAlC,CAFgC,CAWhC;EACA;;EACA,MAAMC,YAAY,GAAIC,MAAD,IAAY;IAC7B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoBF,MAA1B;;IACA,QAAQC,IAAR;MACI;MACA,KAAK1B,qBAAqB,CAACC,gBAA3B;QAA6C;UACzC,OAAOgB,QAAQ,CAAC;YACZC,WAAW,EAAES,OAAO,CAACT,WADT;YAEZC,WAAW,EAAEQ,OAAO,CAACC,QAFT;YAGZR,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKvB,qBAAqB,CAACE,kBAA3B;QAA+C;UAC3C,OAAOe,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKvB,qBAAqB,CAACG,eAA3B;QAA4C;UACxC0B,OAAO,CAACC,GAAR,CAAY,2BAAZ;UACA,OAAOb,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACU,WAA3B;QAAwC;UACpCM,KAAK,CAACE,WAAN,GAAoBF,KAAK,CAACE,WAAN,CAAkBa,MAAlB,CAA0BC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUN,OAA1C,CAApB;UACA,OAAOV,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACkC,kBAA3B;QAA+C;UAC3C,OAAOjB,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAEK,OALL;YAMZJ,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACmC,SAA3B;QAAsC;UAClC,OAAOlB,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACO,eAA3B;QAA4C;UACxC,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACQ,SAA3B;QAAsC;UAClC,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKvB,qBAAqB,CAACI,kBAA3B;QAA+C;UAC3C,OAAOa,QAAQ,CAAC;YACZC,WAAW,EAAES,OADD;YAEZR,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKvB,qBAAqB,CAACS,sBAA3B;QAAmD;UAC/C,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZE,WAAW,EAAE;UALD,CAAD,CAAf;QAOH;MACD;;MACA,KAAKvB,qBAAqB,CAACK,gBAA3B;QAA6C;UACzC,OAAOY,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKvB,qBAAqB,CAACM,yBAA3B;QAAsD;UAClD,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,IAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACW,sBAA3B;QAAmD;UAC/C,OAAOM,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAEK,OALL;YAMZJ,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACa,kBAA3B;QAA+C;UAC3C,OAAOI,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAEK,OALL;YAMZJ,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKvB,qBAAqB,CAACY,WAA3B;QAAwC;UACpC,OAAOK,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,eAAe,EAAE,IALL;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD;QACI,OAAOP,KAAP;IAhKR;EAkKH,CApKD,CAbgC,CAkLhC;EACA;EACA;EAEA;;;EACAA,KAAK,CAACoB,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;IAC1C;IACA,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAM9C,GAAG,CAAC+C,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIf,QAAQ,GAAGY,QAAQ,CAACE,IAAT,CAAcd,QAA7B;QACAA,QAAQ,CAACgB,IAAT,GAAgBN,OAAhB;;QACA,eAAeO,UAAf,CAA0BjB,QAA1B,EAAoC;UAChCY,QAAQ,GAAG,MAAM9C,GAAG,CAACoD,kBAAJ,CAAuBlB,QAAQ,CAACK,GAAhC,EAAqCL,QAArC,CAAjB;;UACA,IAAIY,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;YACvB,eAAeI,YAAf,CAA4BnB,QAA5B,EAAsC;cAClCY,QAAQ,GAAG,MAAM9C,GAAG,CAACsD,gBAAJ,EAAjB;;cACA,IAAIR,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;gBACvB,IAAIM,UAAU,GAAGT,QAAQ,CAACE,IAAT,CAAcxB,WAA/B;gBACAM,YAAY,CAAC;kBACTE,IAAI,EAAE1B,qBAAqB,CAACC,gBADnB;kBAET0B,OAAO,EAAE;oBACLT,WAAW,EAAE+B,UADR;oBAELrB,QAAQ,EAAEA;kBAFL;gBAFA,CAAD,CAAZ;cAOH;YACJ;;YACDmB,YAAY,CAACnB,QAAD,CAAZ;UACH;QACJ;;QACDiB,UAAU,CAACjB,QAAD,CAAV;MACH;IACJ;;IACDW,mBAAmB,CAACF,EAAD,CAAnB;EACH,CA9BD,CAvLgC,CAuNhC;;;EACArB,KAAK,CAACkC,gBAAN,GAAyB,YAAY;IACjC1B,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACE,kBADnB;MAETyB,OAAO,EAAE;IAFA,CAAD,CAAZ;IAIAb,GAAG,CAACqC,oBAAJ;IACAC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;IACAF,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;EACH,CARD;;EAUAtC,KAAK,CAACuC,aAAN,GAAsB,UAAUC,OAAV,EAAmB;IACrC,eAAeC,kBAAf,CAAkCD,OAAlC,EAA0C;MACtChC,YAAY,CAAC;QACTE,IAAI,EAAE1B,qBAAqB,CAACG,eADnB;QAETwB,OAAO,EAAE,EAAC,GAAG6B;QAAJ;MAFA,CAAD,CAAZ;MAIA,IAAIhB,QAAQ,GAAG,MAAM9C,GAAG,CAACgE,YAAJ,CAAiB;QAAC,QAAQ,mBAAT;QAA8B,SAAS;MAAvC,CAAjB,CAArB;MACA7B,OAAO,CAACC,GAAR,CAAY,UAAUU,QAAQ,CAACE,IAAT,CAAcd,QAAd,CAAuBK,GAA7C;MACAjB,KAAK,CAAC2C,cAAN,CAAqBnB,QAAQ,CAACE,IAAT,CAAcd,QAAd,CAAuBK,GAA5C;IACH;;IACDwB,kBAAkB,CAACD,OAAD,CAAlB;EACH,CAXD;;EAaAxC,KAAK,CAAC4C,wBAAN,GAAiC,YAAY;IACzC;IACA,IAAIC,WAAW,GAAG,IAAIlE,mBAAJ,CAAwBqB,KAAK,CAACG,WAA9B,EAA2CH,KAA3C,CAAlB;IACAF,GAAG,CAACgD,cAAJ,CAAmBD,WAAnB;EACH,CAJD;;EAMA7C,KAAK,CAAC+C,2BAAN,GAAoC,YAAY;IAC5C,IAAIF,WAAW,GAAG,IAAIjE,sBAAJ,CAA2BoB,KAAK,CAACG,WAAjC,EAA8CH,KAA9C,EAAqDA,KAAK,CAACM,eAA3D,CAAlB;IACAR,GAAG,CAACgD,cAAJ,CAAmBD,WAAnB;IAEA7C,KAAK,CAACgD,mBAAN;EACH,CALD;;EAOAhD,KAAK,CAACiD,yBAAN,GAAkC,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;IAC5D,IAAIN,WAAW,GAAG,IAAIhE,oBAAJ,CAAyBmB,KAAK,CAACG,WAA/B,EAA4C+C,QAA5C,EAAsDC,QAAtD,EAAgEnD,KAAhE,CAAlB;IACAF,GAAG,CAACgD,cAAJ,CAAmBD,WAAnB;EACH,CAHD;;EAKA7C,KAAK,CAACoD,QAAN,GAAiB,UAAUZ,OAAV,EAAmB;IAChC,eAAea,YAAf,CAA4BhC,EAA5B,EAAgCmB,OAAhC,EAAwC;MACpC,IAAIhB,QAAQ,GAAG,MAAM9C,GAAG,CAAC4E,QAAJ,CAAajC,EAAb,EAAiBmB,OAAO,CAACe,KAAzB,CAArB;;MACA,IAAG/B,QAAQ,CAACgC,MAAT,KAAoB,GAAvB,EAA2B;QACvB3C,OAAO,CAACC,GAAR,CAAYU,QAAQ,CAACE,IAArB;MACH;IACJ;;IAED2B,YAAY,CAACrD,KAAK,CAACG,WAAN,CAAkBc,GAAnB,EAAwBuB,OAAxB,CAAZ;IACA3B,OAAO,CAACC,GAAR,CAAY,6BAA6B2C,IAAI,CAACC,SAAL,CAAelB,OAAf,CAAzC;IACA3B,OAAO,CAACC,GAAR,CAAY,sBAAsB0B,OAAO,CAACe,KAA1C;IACA/C,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACQ,SADnB;MAETmB,OAAO,EAAE,EAAC,GAAG6B;MAAJ;IAFA,CAAD,CAAZ;EAIH,CAfD;;EAiBAxC,KAAK,CAAC2D,mBAAN,GAA4B,UAAUtC,EAAV,EAAc;IACtCe,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;IACAF,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;;IACA,eAAesB,aAAf,CAA6BvC,EAA7B,EAAiC;MAC7B,IAAIG,QAAQ,GAAG,MAAM9C,GAAG,CAAC+C,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIf,QAAQ,GAAGY,QAAQ,CAACE,IAAT,CAAcd,QAA7B;;QAEA,IAAIY,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBnB,YAAY,CAAC;YACTE,IAAI,EAAE1B,qBAAqB,CAACS,sBADnB;YAETkB,OAAO,EAAEC;UAFA,CAAD,CAAZ;QAIH;;QACD,IAAIiD,KAAK,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;QACAwB,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;MACH;IACJ;;IACDH,aAAa,CAACvC,EAAD,CAAb;EACH,CAnBD;;EAqBArB,KAAK,CAACgE,mBAAN,GAA2B,YAAY;IACnChE,KAAK,CAACiE,eAAN;IACA,IAAIJ,KAAK,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;IACAwB,KAAK,CAACC,SAAN,CAAgBI,MAAhB,CAAuB,YAAvB;IACA1D,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACE;IADnB,CAAD,CAAZ;EAGH,CAPD;;EAUAc,KAAK,CAACmE,UAAN,GAAmB,YAAY;IAC3B;IACA,eAAeC,eAAf,CAA+B/C,EAA/B,EAAkC;MAC9B,IAAIG,QAAQ,GAAG,MAAM9C,GAAG,CAAC2F,cAAJ,CAAmBhD,EAAnB,CAArB;MACAR,OAAO,CAACC,GAAR,CAAa,aAAYU,QAAQ,CAACE,IAAT,CAAcC,OAAQ,EAA/C;MACAnB,YAAY,CAAC;QACTE,IAAI,EAAE1B,qBAAqB,CAACU,WADnB;QAETiB,OAAO,EAAEU;MAFA,CAAD,CAAZ;IAIH;;IACD+C,eAAe,CAACpE,KAAK,CAACG,WAAN,CAAkBc,GAAnB,CAAf;IACAjB,KAAK,CAACgE,mBAAN;EACH,CAZD;;EAeAhE,KAAK,CAACsE,mBAAN,GAA4B,UAAUjD,EAAV,EAAc;IACtCe,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;IACAF,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;IACAzB,OAAO,CAACC,GAAR,CAAY,UAAUO,EAAtB;IACAb,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACW,sBADnB;MAETgB,OAAO,EAAEU;IAFA,CAAD,CAAZ;IAIA,IAAIwC,KAAK,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;IACAwB,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;EACH,CAVD;;EAYA/D,KAAK,CAACgD,mBAAN,GAA4B,YAAW;IACnChD,KAAK,CAACiE,eAAN;IACA,IAAIJ,KAAK,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;IACAwB,KAAK,CAACC,SAAN,CAAgBI,MAAhB,CAAuB,YAAvB;IACA1D,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACY;IADnB,CAAD,CAAZ;EAGH,CAPD;;EAUAI,KAAK,CAACuE,iBAAN,GAA0B,UAASlD,EAAT,EAAa;IACnCe,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;IACAF,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,CAAoD,OAApD,EAA6D,4BAA7D;IACA9B,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACa,kBADnB;MAETc,OAAO,EAAEU;IAFA,CAAD,CAAZ;IAKAe,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCmC,KAAjC,GAAuCxE,KAAK,CAACG,WAAN,CAAkBoD,KAAlB,CAAwBlC,EAAxB,EAA4BoD,KAAnE;IACArC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCmC,KAAlC,GAAwCxE,KAAK,CAACG,WAAN,CAAkBoD,KAAlB,CAAwBlC,EAAxB,EAA4BqD,MAApE;IACAtC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BmC,KAA/B,GAAqCxE,KAAK,CAACG,WAAN,CAAkBoD,KAAlB,CAAwBlC,EAAxB,EAA4BsD,SAAjE;IAEA,IAAId,KAAK,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAZ;IACAwB,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;EACH,CAdD;;EAgBA/D,KAAK,CAAC4E,iBAAN,GAA0B,YAAW;IACjC5E,KAAK,CAACiE,eAAN;IACA,IAAIJ,KAAK,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAZ;IACAwB,KAAK,CAACC,SAAN,CAAgBI,MAAhB,CAAuB,YAAvB;IACA1D,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACY;IADnB,CAAD,CAAZ;EAGH,CAPD;;EASAI,KAAK,CAAC6E,yBAAN,GAAkC,UAASC,OAAT,EAAkB;IAChD,IAAIjC,WAAW,GAAG,IAAI/D,oBAAJ,CAAyBkB,KAAK,CAACG,WAA/B,EAA4CH,KAA5C,EAAmDA,KAAK,CAACM,eAAzD,EAA0EwE,OAA1E,CAAlB;IACAhF,GAAG,CAACgD,cAAJ,CAAmBD,WAAnB;IAEA7C,KAAK,CAAC4E,iBAAN;EACH,CALD,CA/WgC,CAsXhC;;;EACA5E,KAAK,CAAC+E,eAAN,GAAwB,YAAY;IAChC,eAAeC,oBAAf,GAAsC;MAClC,MAAMxD,QAAQ,GAAG,MAAM9C,GAAG,CAACsD,gBAAJ,EAAvB;;MACA,IAAIR,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIM,UAAU,GAAGT,QAAQ,CAACE,IAAT,CAAcxB,WAA/B;QACAM,YAAY,CAAC;UACTE,IAAI,EAAE1B,qBAAqB,CAACI,kBADnB;UAETuB,OAAO,EAAEsB;QAFA,CAAD,CAAZ;MAIH,CAND,MAOK;QACDpB,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDkE,oBAAoB;EACvB,CAfD;;EAiBAhF,KAAK,CAAC2C,cAAN,GAAuB,UAAUtB,EAAV,EAAc;IACjC,eAAe4D,mBAAf,CAAmC5D,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAM9C,GAAG,CAAC+C,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIf,QAAQ,GAAGY,QAAQ,CAACE,IAAT,CAAcd,QAA7B;;QAEA,IAAIY,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBnB,YAAY,CAAC;YACTE,IAAI,EAAE1B,qBAAqB,CAACK,gBADnB;YAETsB,OAAO,EAAEC;UAFA,CAAD,CAAZ;UAIAZ,KAAK,CAACkF,OAAN,CAAcC,IAAd,CAAmB,eAAevE,QAAQ,CAACK,GAA3C;QACH;MACJ;IACJ;;IACDgE,mBAAmB,CAAC5D,EAAD,CAAnB;EACH,CAhBD;;EAkBArB,KAAK,CAACoF,uBAAN,GAAgC,YAAW;IACvC5E,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACM;IADnB,CAAD,CAAZ;EAGH,CAJD;;EAMAU,KAAK,CAACqF,eAAN,GAAwB,YAAW;IAC/B,OAAOrF,KAAK,CAACG,WAAN,CAAkBoD,KAAlB,CAAwB+B,MAA/B;EACH,CAFD;;EAGAtF,KAAK,CAACuF,IAAN,GAAa,YAAY;IACrBzF,GAAG,CAAC0F,eAAJ;EACH,CAFD;;EAGAxF,KAAK,CAACyF,IAAN,GAAa,YAAY;IACrB3F,GAAG,CAAC4F,aAAJ;EACH,CAFD,CAtagC,CA0ahC;;;EACA1F,KAAK,CAAC2F,iBAAN,GAA0B,YAAY;IAClCnF,YAAY,CAAC;MACTE,IAAI,EAAE1B,qBAAqB,CAACM,yBADnB;MAETqB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD,CA3agC,CAkbhC;;;EACA,OAAO;IAAEX,KAAF;IAASQ;EAAT,CAAP;AACH,CApbM;;GAAMT,c"},"metadata":{},"sourceType":"module"}