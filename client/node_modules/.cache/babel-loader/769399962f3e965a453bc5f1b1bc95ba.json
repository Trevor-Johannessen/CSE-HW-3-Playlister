{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api'; // OUR TRANSACTIONS\n\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\n  SET_SONGS: \"SET_SONGS\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          console.log(\"Trying to create new list\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false\n          });\n        }\n\n      case GlobalStoreActionType.CREATE_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n\n      case GlobalStoreActionType.SET_SONGS:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function (newList) {\n    async function asyncCreateNewList(newList) {\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: { ...newList\n        }\n      });\n      let response = await api.postPlaylist({\n        \"name\": \"Untitled Playlist\",\n        \"songs\": []\n      });\n      console.log(\"ID = \" + response.data.playlist._id);\n      store.setCurrentList(response.data.playlist._id);\n    }\n\n    asyncCreateNewList(newList);\n  };\n\n  store.createAddSongTransaction = function () {\n    //let transaction = new AddSong_Transaction(store.currentList._id, store.currentList.songs.length, songInfo);\n    let transaction = new AddSong_Transaction(store.currentList, store);\n    tps.addTransaction(transaction);\n  };\n\n  store.createDeleteSongTransaction = function (index) {\n    let transaction = new DeleteSong_Transaction(store.currentList, store, index);\n    tps.addTransaction(transaction);\n  };\n\n  store.createMoveSongTransaction = function (sourceId, targetId) {\n    let transaction = new MoveSong_Transaction(store.currentList, sourceId, targetId, store);\n    tps.addTransaction(transaction);\n  };\n\n  store.setSongs = function (newList) {\n    async function asyncSetSong(id, newList) {\n      let response = await api.postSong(id, newList.songs);\n\n      if (response.status === 200) {\n        console.log(response.data);\n      }\n    }\n\n    asyncSetSong(store.currentList._id, newList);\n    console.log(\"Setting current list to \" + JSON.stringify(newList));\n    console.log(\"Newlists.songs = \" + newList.songs);\n    storeReducer({\n      type: GlobalStoreActionType.SET_SONGS,\n      payload: { ...newList\n      }\n    });\n  };\n\n  store.showDeleteListModal = function (name) {\n    console.log(\"Showing Delete List Modal to delete list \" + name);\n    store.ListToDeleteName = name;\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.deleteList = function () {\n    console.log(\"Deleting list\");\n  };\n\n  store.hideDeleteListModal = function () {\n    console.log(\"Hiding Delete List Modal\");\n  };\n\n  store.deleteList = function (id) {\n    // MAY NEED TO USE STORE REDUCER HERE TO REFRESH THE PAGE\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylist(id);\n      console.log(`Success = ${response.data.success}`);\n    }\n\n    asyncDeleteList(id);\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE\n    });\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CREATE_NEW_SONG","SET_SONGS","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","console","log","DELETE_LIST","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","createNewList","newList","asyncCreateNewList","postPlaylist","setCurrentList","createAddSongTransaction","transaction","addTransaction","createDeleteSongTransaction","index","createMoveSongTransaction","sourceId","targetId","setSongs","asyncSetSong","postSong","songs","status","JSON","stringify","showDeleteListModal","ListToDeleteName","modal","document","getElementById","classList","add","deleteList","hideDeleteListModal","asyncDeleteList","deletePlaylist","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","setIsListNameEditActive","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\n\n// OUR TRANSACTIONS\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction'\n\n\n\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    CREATE_NEW_SONG : \"CREATE_NEW_SONG\",\n    SET_SONGS: \"SET_SONGS\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                console.log(\"Trying to create new list\")\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false\n                })\n            }\n            case GlobalStoreActionType.CREATE_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            case GlobalStoreActionType.SET_SONGS: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    store.createNewList = function (newList) {\n        async function asyncCreateNewList(newList){\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: {...newList}\n            })\n            let response = await api.postPlaylist({\"name\": \"Untitled Playlist\", \"songs\": []});\n            console.log(\"ID = \" + response.data.playlist._id)\n            store.setCurrentList(response.data.playlist._id)\n        }\n        asyncCreateNewList(newList);\n    }\n\n    store.createAddSongTransaction = function () {\n        //let transaction = new AddSong_Transaction(store.currentList._id, store.currentList.songs.length, songInfo);\n        let transaction = new AddSong_Transaction(store.currentList, store);\n        tps.addTransaction(transaction);    \n    }\n\n    store.createDeleteSongTransaction = function (index) {\n        let transaction = new DeleteSong_Transaction(store.currentList, store, index)\n        tps.addTransaction(transaction);\n    }\n\n    store.createMoveSongTransaction = function (sourceId, targetId) {\n        let transaction = new MoveSong_Transaction(store.currentList, sourceId, targetId, store);\n        tps.addTransaction(transaction)\n    }\n\n    store.setSongs = function (newList) {\n        async function asyncSetSong(id, newList){\n            let response = await api.postSong(id, newList.songs)\n            if(response.status === 200){\n                console.log(response.data)\n            }\n        }\n        \n        asyncSetSong(store.currentList._id, newList);\n        console.log(\"Setting current list to \" + JSON.stringify(newList))\n        console.log(\"Newlists.songs = \" + newList.songs)\n        storeReducer({\n            type: GlobalStoreActionType.SET_SONGS,\n            payload: {...newList}\n        }) \n    }\n\n    store.showDeleteListModal = function (name) {\n        console.log(\"Showing Delete List Modal to delete list \" + name);\n        store.ListToDeleteName = name;\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.deleteList = function () {\n        console.log(\"Deleting list\")\n    }\n\n    store.hideDeleteListModal= function () {\n        console.log(\"Hiding Delete List Modal\")\n    }\n\n\n    store.deleteList = function (id) {\n        // MAY NEED TO USE STORE REDUCER HERE TO REFRESH THE PAGE\n        async function asyncDeleteList(id){\n            let response = await api.deletePlaylist(id)\n            console.log(`Success = ${response.data.success}`)\n        }\n        asyncDeleteList(id)\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.setIsListNameEditActive = function() {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE\n        });\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}