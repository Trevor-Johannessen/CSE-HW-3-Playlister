{"ast":null,"code":"import jsTPS_Transaction from \"../common/jsTPS.js\";\nimport { useContext } from 'react';\nimport { GlobalStoreContext } from '../store';\nimport { useHistory } from 'react-router-dom';\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\n\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n  constructor(initApp, initIndex) {\n    super();\n    const {\n      store\n    } = useContext(GlobalStoreContext);\n    const history = useHistory();\n    this.app = initApp;\n  } // DELETE SONG AT GIVEN INDEX FROM LIST\n\n\n  doTransaction() {\n    async function asyncCreateNewSong(id, songInfo) {\n      if (!songInfo) {\n        songInfo = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"yvjvLqfawpk\"\n        };\n      }\n\n      let response = await api.postSong(id, songInfo);\n      console.log(response);\n    }\n\n    asyncCreateNewSong(store.currentList._id, songInfo);\n  } // RESTORE DELETED SONG AT LAST KNOWN INDEX\n\n\n  undoTransaction() {\n    console.log(\"UNDOING ADD TRANSACTION\"); //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n  }\n\n}","map":{"version":3,"names":["jsTPS_Transaction","useContext","GlobalStoreContext","useHistory","AddSong_Transaction","constructor","initApp","initIndex","store","history","app","doTransaction","asyncCreateNewSong","id","songInfo","response","api","postSong","console","log","currentList","_id","undoTransaction"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/transactions/AddSong_Transaction.js"],"sourcesContent":["import jsTPS_Transaction from \"../common/jsTPS.js\"\nimport { useContext } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport { useHistory } from 'react-router-dom'\n\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n    \n    constructor(initApp, initIndex) {\n        super();\n        const { store } = useContext(GlobalStoreContext);\n        const history = useHistory();\n        this.app = initApp;\n    }\n\n    // DELETE SONG AT GIVEN INDEX FROM LIST\n    doTransaction() {\n        async function asyncCreateNewSong(id, songInfo){\n            if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n            let response = await api.postSong(id, songInfo)\n            console.log(response)\n        }\n        asyncCreateNewSong(store.currentList._id, songInfo);\n    }\n    \n    // RESTORE DELETED SONG AT LAST KNOWN INDEX\n    undoTransaction() {\n        console.log(\"UNDOING ADD TRANSACTION\")\n        //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n    }\n}"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCJ,iBAAlC,CAAoD;EAE/DK,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqB;IAC5B;IACA,MAAM;MAAEC;IAAF,IAAYP,UAAU,CAACC,kBAAD,CAA5B;IACA,MAAMO,OAAO,GAAGN,UAAU,EAA1B;IACA,KAAKO,GAAL,GAAWJ,OAAX;EACH,CAP8D,CAS/D;;;EACAK,aAAa,GAAG;IACZ,eAAeC,kBAAf,CAAkCC,EAAlC,EAAsCC,QAAtC,EAA+C;MAC3C,IAAG,CAACA,QAAJ,EAAa;QAACA,QAAQ,GAAG;UAAC,SAAS,UAAV;UAAsB,UAAU,SAAhC;UAA2C,aAAa;QAAxD,CAAX;MAAkF;;MAChG,IAAIC,QAAQ,GAAG,MAAMC,GAAG,CAACC,QAAJ,CAAaJ,EAAb,EAAiBC,QAAjB,CAArB;MACAI,OAAO,CAACC,GAAR,CAAYJ,QAAZ;IACH;;IACDH,kBAAkB,CAACJ,KAAK,CAACY,WAAN,CAAkBC,GAAnB,EAAwBP,QAAxB,CAAlB;EACH,CAjB8D,CAmB/D;;;EACAQ,eAAe,GAAG;IACdJ,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADc,CAEd;EACH;;AAvB8D"},"metadata":{},"sourceType":"module"}