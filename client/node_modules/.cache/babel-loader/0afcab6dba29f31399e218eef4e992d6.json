{"ast":null,"code":"import jsTPS_Transaction from \"../common/jsTPS.js\";\nimport api from '../api';\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\n\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n  constructor(initID, initSong, initIndex) {\n    super();\n    this.listID = initID;\n    this.songInfo = initSong;\n    this.index = initIndex;\n  } // DELETE SONG AT GIVEN INDEX FROM LIST\n\n\n  doTransaction() {\n    async function asyncCreateNewSong(id, songInfo) {\n      if (!songInfo) {\n        songInfo = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"yvjvLqfawpk\"\n        };\n      }\n\n      let resposne = await api.postSong(id, songInfo);\n    }\n\n    asyncCreateNewSong(this.listID, this.songInfo);\n  } // RESTORE DELETED SONG AT LAST KNOWN INDEX\n\n\n  undoTransaction() {\n    console.log(\"UNDOING ADD TRANSACTION\"); //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n\n    async function asyncUndoCreate() {}\n  }\n\n}","map":{"version":3,"names":["jsTPS_Transaction","api","AddSong_Transaction","constructor","initID","initSong","initIndex","listID","songInfo","index","doTransaction","asyncCreateNewSong","id","resposne","postSong","undoTransaction","console","log","asyncUndoCreate"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/transactions/AddSong_Transaction.js"],"sourcesContent":["import jsTPS_Transaction from \"../common/jsTPS.js\"\nimport api from '../api'\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n    \n    constructor(initID, initSong, initIndex) {\n        super();\n        this.listID = initID \n        this.songInfo = initSong\n        this.index = initIndex\n    }\n\n    // DELETE SONG AT GIVEN INDEX FROM LIST\n    doTransaction() {\n        async function asyncCreateNewSong(id, songInfo){\n            if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n            let resposne = await api.postSong(id, songInfo)\n        }\n        asyncCreateNewSong(this.listID, this.songInfo);\n        \n    }\n    \n    // RESTORE DELETED SONG AT LAST KNOWN INDEX\n    undoTransaction() {\n        console.log(\"UNDOING ADD TRANSACTION\")\n        //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n        async function asyncUndoCreate(){\n            \n        }\n    }\n}"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCF,iBAAlC,CAAoD;EAE/DG,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,SAAnB,EAA8B;IACrC;IACA,KAAKC,MAAL,GAAcH,MAAd;IACA,KAAKI,QAAL,GAAgBH,QAAhB;IACA,KAAKI,KAAL,GAAaH,SAAb;EACH,CAP8D,CAS/D;;;EACAI,aAAa,GAAG;IACZ,eAAeC,kBAAf,CAAkCC,EAAlC,EAAsCJ,QAAtC,EAA+C;MAC3C,IAAG,CAACA,QAAJ,EAAa;QAACA,QAAQ,GAAG;UAAC,SAAS,UAAV;UAAsB,UAAU,SAAhC;UAA2C,aAAa;QAAxD,CAAX;MAAkF;;MAChG,IAAIK,QAAQ,GAAG,MAAMZ,GAAG,CAACa,QAAJ,CAAaF,EAAb,EAAiBJ,QAAjB,CAArB;IACH;;IACDG,kBAAkB,CAAC,KAAKJ,MAAN,EAAc,KAAKC,QAAnB,CAAlB;EAEH,CAjB8D,CAmB/D;;;EACAO,eAAe,GAAG;IACdC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADc,CAEd;;IACA,eAAeC,eAAf,GAAgC,CAE/B;EACJ;;AA1B8D"},"metadata":{},"sourceType":"module"}