{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api'; // OUR TRANSACTIONS\n//import MoveSong_Transaction from './transactions/MoveSong_Transaction.js';\n//import DeleteSong_Transaction from './transactions/DeleteSong_Transaction.js';\n//import EditSong_Transaction from './transactions/EditSong_Transaction.js';\n\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CREATE_NEW_SONG: \"CREATE_NEW_SONG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          console.log(\"Trying to create new list\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n\n      case GlobalStoreActionType.CREATE_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function (newList) {\n    async function asyncCreateNewList(newList) {\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: { ...newList\n        }\n      });\n      let response = await api.postPlaylist({\n        \"name\": \"Untitled Playlist\",\n        \"songs\": []\n      });\n      console.log(\"ID = \" + response.data.playlist._id);\n      store.setCurrentList(response.data.playlist._id);\n    }\n\n    asyncCreateNewList(newList);\n  };\n\n  store.createNewSong = function (songInfo) {\n    async function asyncCreateNewSong(id, songInfo) {\n      if (!songInfo) {\n        songInfo = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"yvjvLqfawpk\"\n        };\n      }\n\n      let response = await api.postSong(id, songInfo, store);\n      console.log(response);\n    }\n\n    asyncCreateNewSong(store.currentList._id, songInfo);\n  };\n\n  store.createAddSongTransaction = function (songInfo) {\n    //let transaction = new AddSong_Transaction(store.currentList._id, store.currentList.songs.length, songInfo);\n    let transaction = new AddSong_Transaction(store.currentList, songInfo, store);\n    tps.addTransaction(transaction);\n    storeReducer({\n      type: GlobalStoreActionType.CREATE_NEW_SONG,\n      payload: { ...store.currentList\n      }\n    });\n  }; // GET ENTIRE PLAYLIST\n  // DELETE LAST SONG OFF PLAYLIST\n  // RESUBMIT THAT PLAYLIST\n  // HAHAHAHAHAHAHA\n\n\n  store.deleteSong = function () {\n    console.log(\"UNDOING ADD TRANSACTION\");\n\n    async function asyncUndoCreate(id, newList) {\n      let response = await api.deleteSongUndo(id, newList);\n    } // store.deleteSong(id)\n\n\n    store.currentList.songs.pop();\n    asyncUndoCreate(store.currentList._id, store.currentList.songs);\n    console.log(\"DELETE SONG IN STORE\");\n  };\n\n  store.deleteList = function (id) {\n    // MAY NEED TO USE STORE REDUCER HERE TO REFRESH THE PAGE\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylist(id);\n      console.log(`Success = ${response.data.success}`);\n    }\n\n    asyncDeleteList(id);\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CREATE_NEW_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","console","log","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","createNewList","newList","asyncCreateNewList","postPlaylist","setCurrentList","createNewSong","songInfo","asyncCreateNewSong","postSong","createAddSongTransaction","transaction","addTransaction","deleteSong","asyncUndoCreate","deleteSongUndo","songs","pop","deleteList","asyncDeleteList","deletePlaylist","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\n// OUR TRANSACTIONS\n//import MoveSong_Transaction from './transactions/MoveSong_Transaction.js';\n//import DeleteSong_Transaction from './transactions/DeleteSong_Transaction.js';\n//import EditSong_Transaction from './transactions/EditSong_Transaction.js';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    CREATE_NEW_SONG : \"CREATE_NEW_SONG\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                console.log(\"Trying to create new list\")\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            case GlobalStoreActionType.CREATE_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    store.createNewList = function (newList) {\n        async function asyncCreateNewList(newList){\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: {...newList}\n            })\n            let response = await api.postPlaylist({\"name\": \"Untitled Playlist\", \"songs\": []});\n            console.log(\"ID = \" + response.data.playlist._id)\n            store.setCurrentList(response.data.playlist._id)\n        }\n        asyncCreateNewList(newList);\n    }\n\n    store.createNewSong = function (songInfo) {\n        async function asyncCreateNewSong(id, songInfo){\n            if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n            let response = await api.postSong(id, songInfo, store)\n            console.log(response)\n        }\n        asyncCreateNewSong(store.currentList._id, songInfo);\n    }\n\n    store.createAddSongTransaction = function (songInfo) {\n        //let transaction = new AddSong_Transaction(store.currentList._id, store.currentList.songs.length, songInfo);\n        let transaction = new AddSong_Transaction(store.currentList, songInfo, store);\n        tps.addTransaction(transaction);\n        storeReducer({\n            type: GlobalStoreActionType.CREATE_NEW_SONG,\n            payload: {...store.currentList}\n        })        \n    }\n\n    // GET ENTIRE PLAYLIST\n    // DELETE LAST SONG OFF PLAYLIST\n    // RESUBMIT THAT PLAYLIST\n    // HAHAHAHAHAHAHA\n    store.deleteSong = function () {\n        console.log(\"UNDOING ADD TRANSACTION\")\n        \n        async function asyncUndoCreate(id, newList){\n            let response = await api.deleteSongUndo(id, newList)\n        }\n        // store.deleteSong(id)\n        store.currentList.songs.pop();\n        asyncUndoCreate(store.currentList._id, store.currentList.songs);\n\n        console.log(\"DELETE SONG IN STORE\")\n    }\n\n\n    store.deleteList = function (id) {\n        // MAY NEED TO USE STORE REDUCER HERE TO REFRESH THE PAGE\n        async function asyncDeleteList(id){\n            let response = await api.deletePlaylist(id)\n            console.log(`Success = ${response.data.success}`)\n        }\n        asyncDeleteList(id)\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}