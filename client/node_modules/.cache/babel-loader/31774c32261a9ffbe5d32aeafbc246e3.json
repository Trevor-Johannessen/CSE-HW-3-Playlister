{"ast":null,"code":"import jsTPS_Transaction from \"../common/jsTPS.js\";\nimport api from '../api';\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\n\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n  /*\n  constructor(initID, initListLength, initSong, initIndex) {\n      super();\n      this.listID = initID;\n      this.songInfo = initSong;\n      this.index = initIndex;\n      this.listLength = initListLength;\n  }\n  */\n  constructor(initID, initList, initIndex) {\n    super();\n    this.list = initList;\n    this.listID = initList._id;\n    this.songInfo = initSong;\n  } // DELETE SONG AT GIVEN INDEX FROM LIST\n\n\n  doTransaction() {\n    async function asyncCreateNewSong(id, songInfo) {\n      if (!songInfo) {\n        songInfo = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"yvjvLqfawpk\"\n        };\n      }\n\n      let resposne = await api.postSong(id, songInfo);\n    }\n\n    asyncCreateNewSong(this.listID, this.songInfo);\n  } // DELETE SONG AT GIVEN INDEX FROM LIST\n\n\n  doTransaction() {\n    async function asyncCreateNewSong(id, songInfo) {\n      console.log(this.list);\n    }\n\n    asyncCreateNewSong(this.listID, this.songInfo);\n  } // RESTORE DELETED SONG AT LAST KNOWN INDEX\n\n\n  undoTransaction() {\n    console.log(\"UNDOING ADD TRANSACTION\"); //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n\n    async function asyncUndoCreate(id, index) {\n      console.log(\"Index = \" + index);\n      let response = await api.deleteSongUndo(id, index);\n    }\n\n    asyncUndoCreate(this.listID, this.listLength - 1);\n  }\n\n}","map":{"version":3,"names":["jsTPS_Transaction","api","AddSong_Transaction","constructor","initID","initList","initIndex","list","listID","_id","songInfo","initSong","doTransaction","asyncCreateNewSong","id","resposne","postSong","console","log","undoTransaction","asyncUndoCreate","index","response","deleteSongUndo","listLength"],"sources":["/Users/trevorjohannessen/My Files/School Stuff/CSE 316/CSE 316 HW 3/Playlister_HW3/client/src/transactions/AddSong_Transaction.js"],"sourcesContent":["import jsTPS_Transaction from \"../common/jsTPS.js\"\nimport api from '../api'\n/**\n * DeleteSong_Transaction\n * \n * This class represents a transaction that works with deleting a song. \n * It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\nexport default class AddSong_Transaction extends jsTPS_Transaction {\n    \n    /*\n    constructor(initID, initListLength, initSong, initIndex) {\n        super();\n        this.listID = initID;\n        this.songInfo = initSong;\n        this.index = initIndex;\n        this.listLength = initListLength;\n    }\n    */\n\n    constructor(initID, initList, initIndex) {\n        super();\n        this.list = initList;\n        this.listID = initList._id;\n        this.songInfo = initSong;\n    }\n\n    // DELETE SONG AT GIVEN INDEX FROM LIST\n    doTransaction() {\n        async function asyncCreateNewSong(id, songInfo){\n            if(!songInfo){songInfo = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"yvjvLqfawpk\"}} \n            let resposne = await api.postSong(id, songInfo)\n        }\n        asyncCreateNewSong(this.listID, this.songInfo);\n    }\n\n    // DELETE SONG AT GIVEN INDEX FROM LIST\n    doTransaction() {\n        async function asyncCreateNewSong(id, songInfo){\n            console.log(this.list)\n        }\n        asyncCreateNewSong(this.listID, this.songInfo);\n    }\n    \n    // RESTORE DELETED SONG AT LAST KNOWN INDEX\n    undoTransaction() {\n        console.log(\"UNDOING ADD TRANSACTION\")\n        //this.app.deleteSong(this.app.state.currentList.songs.length-1)\n        async function asyncUndoCreate(id, index){\n            console.log(\"Index = \" + index)\n            let response = await api.deleteSongUndo(id, index)\n        }\n        asyncUndoCreate(this.listID, this.listLength-1);\n    }\n}"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCF,iBAAlC,CAAoD;EAE/D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEIG,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,SAAnB,EAA8B;IACrC;IACA,KAAKC,IAAL,GAAYF,QAAZ;IACA,KAAKG,MAAL,GAAcH,QAAQ,CAACI,GAAvB;IACA,KAAKC,QAAL,GAAgBC,QAAhB;EACH,CAjB8D,CAmB/D;;;EACAC,aAAa,GAAG;IACZ,eAAeC,kBAAf,CAAkCC,EAAlC,EAAsCJ,QAAtC,EAA+C;MAC3C,IAAG,CAACA,QAAJ,EAAa;QAACA,QAAQ,GAAG;UAAC,SAAS,UAAV;UAAsB,UAAU,SAAhC;UAA2C,aAAa;QAAxD,CAAX;MAAkF;;MAChG,IAAIK,QAAQ,GAAG,MAAMd,GAAG,CAACe,QAAJ,CAAaF,EAAb,EAAiBJ,QAAjB,CAArB;IACH;;IACDG,kBAAkB,CAAC,KAAKL,MAAN,EAAc,KAAKE,QAAnB,CAAlB;EACH,CA1B8D,CA4B/D;;;EACAE,aAAa,GAAG;IACZ,eAAeC,kBAAf,CAAkCC,EAAlC,EAAsCJ,QAAtC,EAA+C;MAC3CO,OAAO,CAACC,GAAR,CAAY,KAAKX,IAAjB;IACH;;IACDM,kBAAkB,CAAC,KAAKL,MAAN,EAAc,KAAKE,QAAnB,CAAlB;EACH,CAlC8D,CAoC/D;;;EACAS,eAAe,GAAG;IACdF,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADc,CAEd;;IACA,eAAeE,eAAf,CAA+BN,EAA/B,EAAmCO,KAAnC,EAAyC;MACrCJ,OAAO,CAACC,GAAR,CAAY,aAAaG,KAAzB;MACA,IAAIC,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,cAAJ,CAAmBT,EAAnB,EAAuBO,KAAvB,CAArB;IACH;;IACDD,eAAe,CAAC,KAAKZ,MAAN,EAAc,KAAKgB,UAAL,GAAgB,CAA9B,CAAf;EACH;;AA7C8D"},"metadata":{},"sourceType":"module"}